"use client"

import React, { useRef, useCallback } from "react"
import { FileCode, BarChart3, Database } from "lucide-react"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { ScrollArea } from "@/components/ui/scroll-area"
import { TabsList, TabsTrigger, Tabs, TabsContent } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { CodeArtifactsTab } from "./tabs/CodeArtifactsTab"
import { MetricsArtifactsTab } from "./tabs/MetricsArtifactsTab"
import { ModelsArtifactsTab } from "./tabs/ModelsArtifactsTab"
import { useManifestData } from "@/lib/queries/useManifestData"
import { parseJSON } from "@/lib/utils" // Add this utility function

// Utility function to format file size to MB or KB depending on size
const formatSizeInMB = (sizeInBytes: number) => {
  if (sizeInBytes < 1024 * 1024) {
    // If size is less than 1MB, show in KB
    const sizeInKB = sizeInBytes / 1024;
    return sizeInKB.toFixed(2) + " KB";
  } else {
    // Otherwise show in MB
    const sizeInMB = sizeInBytes / (1024 * 1024);
    return sizeInMB.toFixed(2) + " MB";
  }
};

interface AgentArtifactsProps {
  artifacts: {
    code: any[]
    models: any[]
    metrics: any[]
  }
  readyArtifacts: {
    code: string[]
    models: string[]
    metrics: string[]
  }
  selectedVersion: string
  setSelectedVersion: (version: string) => void
  availableVersions: string[]
  openSections: {
    code: boolean
    models: boolean
    metrics: boolean
  }
  toggleSection: (section: any) => void
  selectedCodeFile: string
  setSelectedCodeFile: (fileId: string) => void
  currentMetricData: number[]
  artifactRefs: React.MutableRefObject<{ [key: string]: HTMLDivElement | null }>
  getFilteredArtifacts: (type: "code" | "models" | "metrics") => any[]
  getLatestMetric: () => any
  renderMetricsChart: (accuracies: number[]) => React.JSX.Element
}

export function AgentArtifacts({
  artifacts,
  readyArtifacts,
  selectedVersion,
  setSelectedVersion,
  availableVersions,
  openSections,
  toggleSection,
  selectedCodeFile,
  setSelectedCodeFile,
  currentMetricData,
  artifactRefs,
  getFilteredArtifacts,
  getLatestMetric,
  renderMetricsChart,
}: AgentArtifactsProps) {
  // Use React Query hook for manifest data
  const { data: manifestData, isLoading, error } = useManifestData(selectedVersion);
  
  // Parse the JSON string from manifest data
  const parsedManifest = manifestData ? parseJSON(manifestData) : null;
  
  // Extract run ID from the selectedVersion or other source
  const runId = selectedVersion || undefined;

  // Handle version change - simplified with React Query
  const handleVersionChange = useCallback((version: string) => {
    setSelectedVersion(version);
    // No need to manually fetch data - React Query will handle this
  }, [setSelectedVersion]);

  return (
    <Card className="flex-1 flex flex-col border-azure-border shadow-sm">
      <CardHeader className="border-b border-azure-border bg-white pb-3">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-lg font-semibold text-azure-dark-blue">ML Artifacts</CardTitle>
            <CardDescription className="text-gray-600">
              Code, models, and metrics generated by the agent
              {isLoading && " (Loading...)"}
              {error && " (Error loading data)"}
            </CardDescription>
          </div>

          {/* Version selector - only show when versions are available */}
          {availableVersions.length > 0 && (
            <div className="flex items-center gap-2">
              <Label htmlFor="version-select" className="text-sm text-gray-600">
                Version:
              </Label>
              <Select value={selectedVersion} onValueChange={handleVersionChange}>
                <SelectTrigger id="version-select" className="w-24 border-azure-border text-gray-700">
                  <SelectValue placeholder="Select version" />
                </SelectTrigger>
                <SelectContent>
                  {availableVersions.map((version) => (
                    <SelectItem key={version} value={version}>
                      {version}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}
        </div>
      </CardHeader>
      <CardContent className="flex-1 overflow-auto bg-white p-4">
        <ScrollArea className="h-[calc(100vh-240px)]">
          <Tabs defaultValue="code" className="artifact-tabs">
            <TabsList className="mb-4 w-full grid grid-cols-3">
              <TabsTrigger value="code" className="artifact-tab">
                <FileCode className="h-4 w-4 mr-2" />
                Code
              </TabsTrigger>
              <TabsTrigger value="models" className="artifact-tab">
                <Database className="h-4 w-4 mr-2" />
                Models
              </TabsTrigger>
              <TabsTrigger value="metrics" className="artifact-tab">
                <BarChart3 className="h-4 w-4 mr-2" />
                Metrics
              </TabsTrigger>
            </TabsList>

            <TabsContent value="code" className="mt-0 p-0">
              <CodeArtifactsTab 
                getFilteredArtifacts={getFilteredArtifacts}
                selectedCodeFile={selectedCodeFile}
                setSelectedCodeFile={setSelectedCodeFile}
                artifactRefs={artifactRefs}
                manifestData={parsedManifest}
                runId={runId}
              />
            </TabsContent>

            <TabsContent value="models" className="mt-0 p-0">
              <ModelsArtifactsTab 
                getFilteredArtifacts={getFilteredArtifacts}
                artifactRefs={artifactRefs}
                manifestData={parsedManifest}
                formatSizeInMB={formatSizeInMB}
              />
            </TabsContent>

            <TabsContent value="metrics" className="mt-0 p-0">
              <MetricsArtifactsTab 
                currentMetricData={currentMetricData}
                getLatestMetric={getLatestMetric}
                renderMetricsChart={renderMetricsChart}
                selectedVersion={selectedVersion}
                artifactRefs={artifactRefs}
              />
            </TabsContent>
          </Tabs>
        </ScrollArea>
      </CardContent>
    </Card>
  )
}
